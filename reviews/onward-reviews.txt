From: "Onward! 2024 Papers HotCRP" <noreply-onward24papers@hotcrp.com>
Subject: [Onward! 2024 Papers] Submission #5 "Moldable Exceptions"
Date: 7 June 2024 at 00:07:21 CEST
To: Andrei Chiş <andrei.chis@feenk.com>, Oscar Nierstrasz <oscar.nierstrasz@acm.org>, Tudor Girba <tudor.girba@feenk.com>
Reply-To: jonathanmedwards@gmail.com

Dear authors,

Congratulations, your submission has been accepted! Please read the attached reviews and consider their criticisms and suggestions as you prepare the final version of your paper for publication. The deadline for the final version is September 1, and we will contact you later about how to submit it.

We strongly encourage you to present your paper in person at the conference to get the highest bandwidth interaction with the community. However we plan to also have a remote participation option.

See you in Pasadena!
- Jonathan

Review #5A
===========================================================================

Overall merit
-------------
4. Accept

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
The paper presents "moldable exceptions", which is a lightweight extensibility mechanism for debugging tools in a Smalltalk-based object-oriented programming system (Pharo/GToolkit). Moldable exceptions make it possible to customize debugger view by specifying additional information in the exception triggered by the program (which is easier than developing a more heavyweight debugger extension). The system can also propose automatic code fixes to be applied when an exception occurs. The paper motivates and explains the idea, presents its implementation in Pharo/GToolkit and illustrates it through a number of case studies (of domain-specific debuggers).

Comments for authors
--------------------
This is a paper contributing to an important and often overlooked research area. It presents a system that is clearly useful in a number of scenarios. It is perhaps not obvious how easily this would generalise, but the presented scenarios are very convincing. I found the technical details in the paper fairly light (perhaps not giving enough detail to reimplement a system like this in other context), but the presentation of its capabilities is clear and inspiring. There is also nice motivation behind this (comparison between moldable inspector and moldable debugger in terms of how many custom ones have been written). The paper is also well-written (although it would be nice if the screenshots were bigger.)

I have the following questions and remarks about the paper:

* To what extent does this require more domain-specific exceptions than in typical code? It seems that most of the examples in the paper are fairly specific (often related to testing and assertion failures), but does the mechanism also help with more generic exceptions (indicating e.g., an invalid argument or an invalid index)? You mention debuggers for DSLs later and this seems like an area where moldable exceptions would also work well - but can they also help with debugging more general issues?

* Related to the above, did getting the case studies to work require writing code differently than one might write it without using "moldable exceptions"? (LudoMoveAssertionException seems fairly specific!) Note that this may simply be a case of a tool that encourages better programming practice - but it would be good to know if this is the case or not.

* What exactly support from the runtime is needed for this kind of system to work? Can one imagine implementing this for JVM/.NET/JavaScript, or does it need some Smalltalk-specific capabilities? (One particular thing seems to be access to exception stack trace - e.g., for gtLocateAssertequalsContextWithComparableTypes - but are there other things the system needs?)

* Some aspects of this work seem to be closely related to probes as implemented in [1]. Although this is not about moldability as such, it is also a lightweight way of extending the debugger (and may help in similar situations, e.g., when run-time stack does not give useful information). Relatedly, could moldable exceptions be used to generate more accurate call stack information in asynchronous code? (This seems to be a common issue in JavaScript or C# that explicitly collect "async call stack" to improve this aspect of debugging.)

* When discussing "Fix & Retry" - can you clarify what part of code is rerun? It seems that figuring out how much to rerun is not obvious. I imagine this needs to walk over the call stack to find the first place where the fixed code would be executed - but how exactly does this work? Or is this a more manual process?

* It would be nice to know a bit more about how the implementation works (the current "Implementation" section gives some hints, but seems more about the specific API of the system). More specifically, I wonder what all the information of the last 5 lines in the code snippet on line 685-697 mean - and what other options are there. Another case is "Debugging Targets" (line 884) which also seems a very important technical aspect - but you do not say how this is used/set in specific case studies in the paper.

* It may be nice to add a bit more context for some of the ideas - although features like automatic code correction are not common in present-day debuggers, this is something that has a long history and there were various systems implementing some of these features since PILOT [2] and DWIM [3]. I believe mentioning those may inspire the reader to think about other capabilities of these ancient tools that current debuggers are lacking!

References

[1] Rein, Patrick, et al. "Broadening the View of Live Programmers." The Art, Science, and Engineering of Programming 8.3 (2024): 13-1.

[2] Teitelman, Warren. "PILOT: a step toward man-computer symbiosis." (1966).

[3] Teitelman, Warren. "Interlisp Reference Manual. Xerox Corporation (1974). Available at: http://bitsavers.informatik.uni-stuttgart.de/pdf/xerox/interlisp/Interlisp_Reference_Manual_1974.pdf (see Section 17)


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #5B
===========================================================================

Overall merit
-------------
5. Strong accept

Reviewer expertise
------------------
4. Expert

Paper summary
-------------
This submission proposes “moldable exceptions” as a mechanism to adapt and improve the (graphical) user interface (UI) of symbolic debuggers.

The work is based on extensible debuggers and moldable debuggers in particular, which already allow for specialized UIs depending on the execution context of the unfolding computation of interest.

Moldable exceptions present further means to allow for even more specialized debugging UIs based on the context in which an exception is raised by providing a light-weight framework that supports programmers in both gathering the information of interest and offering dedicated views to be embedded in the co-designed debugging infrastructure.

The benefits expected are a better debugging experience due to more useful information presented in a more suitable UI.

Comments for authors
--------------------
I liked reading this submission very much.

And I liked it almost as is.

There are only a few suggestions the authors might consider when preparing the final version of their paper:

* (l. 284-285) Here, the authors talk about the <gtView> and <gtAction> annotations, but then change to presumably more specific variants like <gtExceptionView> etc. Readers might be wondering about the relationship between those.

* (l. 328…) What is view forwarding / how does it work?

* (l. 336) The need to explicitly provide / decide on priorities could be a source of many problems.  Why are they there, how can one take advantage of them, and what needs to be considered/ensured/avoided in a production-level debugger environment based on them?

* (l. 416…) Section 4 built around “GT Scripter” felt a little out of place compared to the text until then and should be revised.

* (l. 561…) The first four paragraphs of Section 5 felt overly specific and, as presented, not contributing to the argument.

* (l. 950) “self signal” -> “super signal”?

I would like to suggest revisiting related work wrt. to projectional editors, Babylonian programming, and live and exploratory programming in general.

[a few typos]

* (l. 567) “an explanatory string, and” -> “an explanatory string and”

* (l. 601) “caught a static type system” -> “caught by a static type system”

Great work.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #5C
===========================================================================

Overall merit
-------------
4. Accept

Reviewer expertise
------------------
2. Some familiarity

Paper summary
-------------
The paper introduces *moldable exceptions*, a lightweight technique for developers to introduce custom debugging user interfaces and interactions. A developer can make an exception moldable by defining view/interaction methods at the site of the exception’s definition; a *moldable debugger* uses these methods to display the custom debugger when the exception is thrown. The paper introduces a series of worked examples of this concept of increasing complexity, and concludes with an overview of prior work on exceptions and debugging tools.

Comments for authors
--------------------
I really like the simplicity of the moldable exception abstraction! Moreover, the worked examples in the paper show that this abstraction is not just simple, but also quite flexible. Based on the reimagining of what debuggers could look like, a concrete implementation to back it up, and a solid review of prior work, **I recommend this paper to be accepted to Onward! 2024**.

However, I do have a couple of questions, particularly about the specific benefits of moldable exceptions and the framing of the paper.

# 1. What work exactly do moldable exceptions save developers from doing?

I do not have a clear sense to what the alternative to moldable exceptions entails. A running line of argumentation throughout the paper is that “Custom debuggers offering contextual debugging views and actions can greatly improve our ability to reason about the current problem,” (which is unsubstantiated in this paper via evaluation or citation, but I think is compelling enough for Onward) [line 17], but that “Implementing such custom debuggers, however, is non-trivial.” [line 19].

The difficulty of implementing custom debuggers appears to me to be the primary motivation for moldable exceptions (e.g. the second paragraph of the introduction), yet I feel as though, after reading the paper, I do not actually have a clear understanding of what the difficulty of implementing custom debuggers are.

My intuition would tell me that the hardest part about implementing a custom debugger would be the interface and interactions themselves, which, from my understanding, are  forwarded for many of the examples in the paper to existing, underlying implementations (paragraph on line 972). **If we already have these implementations, what is hard about using them to make a debugging interface given previous extensibility mechanisms of debuggers?** I think that a satisfying answer to that key question would make this paper even better!

# 2. What is the benefit of moldable exceptions specifically (vs. other moldable interfaces)?

More broadly, I found it a bit challenging to identify what precisely the benefit of including these interfaces in the debugger (specifically) is. For example, in the Ludo example, what do we get by having the visualization being tied to an exception / debugger mechanism vs. simply just showing the state at all times as an output with navigable exploration interactions? I think I start to see an answer to this with the paragraph on line 504 (“Why do we need these views?”) and the argument on line 754 about choosing a tool ahead of time, but I still really don’t have a crisp answer to this question in my head.

# Minor Comments

- I love all the photos! Please keep those in any revisions you make (to the extent that you can).
- I love line 1122 (and subsequent prose)! The very first paragraph of the intro didn’t quite land with me (I still use a terminal-based debugger and kinda like it… but I agree that we need reimagined debuggers), so maybe you could consider incorporating the perspective/prose from 1122 in the first paragraph of the intro?
- The related work feels a bit like a potpourri of other points in the space. Would it be possible to impose some sort of hierarchy or other structure into the review, perhaps by setting up axes in which these tools vary or are the same? I feel like I would come away with a better understanding of where moldable exceptions fits into the broader landscape of debugging tools.
- Also regarding the related work: Are “expect tests” (a.k.a. “snapshot tests” or “golden tests”) relevant to discuss? They are also often based on exceptions and diffs. https://blog.janestreet.com/the-joy-of-expect-tests/
- The SmaCC reference was a bit confusing and not very fleshed out - I would recommend either spending some more space explaining it or simply removing it.
- The code snippets started getting hard to follow starting on line 397. Syntax highlighting might help, or spending a bit more time explaining the code (or just removing anything unnecessary).
- Line 508 regarding “doing so is clumsy”: Make that clumsiness tangible! If you really show the reader how clumsy it would be to do the alternative, that would be a great opportunity to highlight what works well about your approach. As of right now, I am basically just taking your word on it.
- Line 428: What is the “Coder”?

