@inproceedings{Chis15a,
     abstract={Object inspectors are an essential category of tools that allow developers to comprehend the run-time of object-oriented systems. Traditional object inspectors favor a generic view that focuses on the low-level details of the state of single objects. Based on 16 interviews with software developers and a follow-up survey with 62 respondents we identified a need for object inspectors that support different high-level ways to visualize and explore objects, depending on both the object and the current developer need. We propose the Moldable Inspector, a novel inspector model that enables developers to adapt the inspection workflow to suit their immediate needs by making the inspection context explicit, providing multiple interchangeable domain-specific views for each object, and supporting  a workflow that groups together multiple levels of connected objects. We show that the Moldable Inspector can address multiple kinds of development needs involving a wide range of objects.},
	 author = {Andrei Chi\c{s} and Tudor G\^irba and Oscar Nierstrasz and Aliaksei Syrel},
	 title = {The {Moldable} {Inspector}},
	 booktitle = {Proceedings of the 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	Annote = {internationalconference},
	 series = {Onward! 2015},
	 year = {2015},
	 location = {Pittsburgh, PA, USA},
	 pages = {44--60},
	 numpages = {17},
	 url = {http://scg.unibe.ch/archive/papers/Chis15a-MoldableInspector.pdf},
	 doi = {10.1145/2814228.2814234},
	 isbn = {978-1-4503-3688-8},
	 acmid = {2814234},
	 publisher = {ACM},
	 address = {New York, NY, USA},
	 keywords = {scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub},
	 peerreview = {yes},
	 medium = {2}
}

@inproceedings{Chis15b,
	Annote = {internationalworkshop},
	abstract={Understanding the run-time behaviour of object-oriented applications entails the comprehension of run-time objects. Traditional object inspectors favor generic views that focus on the low-level details of the state of single objects. While universally applicable, this generic approach does not take into account the varying needs of developers that could benefit from tailored views and exploration possibilities. GTInspector is a novel moldable object inspector that provides different high-level ways to visualize and explore objects, adapted to both the object and the current developer need. More information about the GTInspector can be found at: scg.unibe.ch/research/moldableinspector},
	author = {Andrei Chi\c{s} and Tudor G\^irba and Oscar Nierstrasz and Aliaksei Syrel},
	title={{GTInspector}: A Moldable Domain-Aware Object Inspector},
	booktitle = {Proceedings of the Companion Publication of the 2015 ACM SIGPLAN Conference on Systems, Programming, and Applications: Software for Humanity},
	series = {SPLASH Companion 2015},
	year = {2015},
	location = {Pittsburgh, PA, USA},
	pages = {15--16},
	numpages = {2},
	url = {http://scg.unibe.ch/archive/papers/Chis15b-GTInspector.pdf},
	doi = {10.1145/2814189.2814194},
	isbn = {978-1-4503-3722-9},
	acmid = {2814194},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub},
	peerreview = {yes},
	medium = {2}
}

@article{Chis15c,
	abstract = {Understanding the run-time behavior of software systems can be a challenging activity. Debuggers are an essential category of tools used for this purpose as they give developers direct access to the running systems. Nevertheless, traditional debuggers rely on generic mechanisms to introspect and interact with the running systems, while developers reason about and formulate domain-specific questions using concepts and abstractions from their application domains. This mismatch creates an abstraction gap between the debugging needs and the debugging support leading to an inefficient and error-prone debugging effort, as developers need to recover concrete domain concepts using generic mechanisms. To reduce this gap, and increase the efficiency of the debugging process, we propose a framework for developing domain-specific debuggers, called the Moldable Debugger, that enables debugging at the level of the application domain. The Moldable Debugger is adapted to a domain by creating and combining domain-specific debugging operations with domain-specific debugging views, and adapts itself to a domain by selecting, at run time, appropriate debugging operations and views. To ensure the proposed model has practical applicability (i.e., can be used in practice to build real debuggers), we discuss, from both a performance and usability point of view, three implementation strategies. We further motivate the need for domain-specific debugging, identify a set of key requirements and show how our approach improves debugging by adapting the debugger to several domains.},
	title = {Practical domain-specific debuggers using the {Moldable Debugger} framework},
	journal = {Computer Languages, Systems \& Structures},
	volume = {44, Part A},
	pages = {89--113},
	year = {2015},
	Annote = {internationaljournal},
	note = {Special issue on the 6th and 7th International Conference on Software Language Engineering ({SLE} 2013 and {SLE} 2014)},
	issn = {1477-8424},
	doi = {10.1016/j.cl.2015.08.005},
	url = {http://scg.unibe.ch/archive/papers/Chis15c-PracticalDomainSpecificDebuggers.pdf},
	peerReview = {yes},
	author = {Andrei Chi\c{s} and Marcus Denker and Tudor G\^irba and Oscar Nierstrasz},
	medium = {2},
	keywords = {scg-pub scg15 jb16 snf-asa1 Andrei Chis, Tudor Girba, Debugging, Customization, Domain-specific tools, User interfaces, Programming environments, Smalltalk, girba feenk-pub}
}

@inproceedings{Chis15d,
	Abstract = {Developers commonly ask detailed and domain-specific questions about the software systems they are developing and maintaining. Integrated development environments (IDEs) form an essential category of tools for developing software that should support software engineering decision making. Unfortunately, rigid and generic IDEs that focus on low-level programming tasks, that promote code rather than data, and that suppress customization, offer limited support for informed decision making during software development. We propose to improve decision making within IDEs by moving from generic to context-aware IDEs through moldable tools. In this paper, we promote the idea of moldable tools, illustrate it with concrete examples, and discuss future research directions.},
	Author = {Andrei Chi\c{s} and Tudor G\^{i}rba and Oscar Nierstrasz},
	booktitle = {Proceedings of the 6th Workshop on Evaluation and Usability of Programming Languages and Tools},
    series = {PLATEAU '15},
	doi = {10.1145/2846680.2846684},
	Keywords = {scg-pub scg15 jb16 snf-asa1, internationalworkshop, Andrei Chis,Tudor Girba, girba feenk-pub},
	location = {Pittsburgh, PA, USA},
	Peerreview = {yes},
	medium = {2},
	Title = {Towards moldable development tools},
	Url = {http://scg.unibe.ch/archive/papers/Chis15d_TowardsMoldableDevelopmentTools.pdf},
	Year = {2015},
	isbn = {978-1-4503-3907-0},
	pages = {25--26},
	acmid = {2846684},
	publisher = {ACM},
	address = {New York, NY, USA}
}

@inproceedings{Chis16a,
	Abstract = {Software systems involve many different kinds of domain-specific and interrelated software entities.
A common strategy employed by developers to deal with this reality is to perform exploratory investigations by means of searching.
Nevertheless, most integrated development environments (IDEs) support searching through generic and disconnected search tools.
This impedes search tasks over domain-specific entities as considerable effort is wasted by developers locating and linking data and concepts relevant to their application domains. To tackle this problem we propose Spotter, a moldable framework for supporting contextual-aware searching in IDEs by enabling developers to easily create custom searches for domain objects.  In this paper we motivate a set of requirements for Spotter and show, through usage scenarios, that Spotter improves program comprehension by reducing the effort required to find and search through concepts from a wide range of domains. Furthermore, we show that by taking code into account, Spotter can provide a single entry point for embedding search support within an IDE.},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	Annote = {internationalconference},
	Series = {Onward! 2016},
	Title = {Moldable, context-aware searching with {Spotter}},
	Doi = {10.1145/2986012.2986023},
	pages = {128--144},
	Numpages = {17},
	Location = {Amsterdam, Netherlands},
	Year = {2016},
	Peerreview = {yes},
	Medium = {2},
	Publisher = {ACM},
	Keywords = {scg-pub scg16 jb17 snf-asa2 Andrei Chis, Spotter, Tudor Girba, girba feenk-pub},
	Url = {http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf},
	Address = {New York, NY, USA}}

@inproceedings{Chis16b,
	Abstract = {Developing and evolving software requires developers to continuously make decisions about how to steer the design and implementation of their applications. To make informed decisions developers commonly formulate detailed and domain-specific questions about their software systems and  use tools to explore available information and answer those questions. Development tools however focus on generic programming tasks while program comprehension and analysis tools typically are not tightly integrated with their development tools and environments. This  has a negative effect on program comprehension as it increases the effort and the time needed to obtain an answer. To improve program comprehension we propose that developers build software using development tools tailored to their specific application domains, as this can directly answer domain-specific questions. We introduce moldable development as an approach for developing software in which developers evolve development tools together with their applications.  In this paper we sketch the idea of moldable development and give examples to illustrate how it can be applied in practice. Through these examples we show that given a low cost for extending development tools, developers can create relevant and useful customizations to help them evolve their own applications.},
	Annote = {internationalworkshop},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {Proceedings of the Programming Experience 2016 (PX/16) Workshop},
 	Series = {PX/16},
	Location={Rome, Italy},
	Title = {Exemplifying Moldable Development},
	Doi = {10.1145/2984380.2984385},
	Isbn = {978-1-4503-4776-1},
	Pages= {33--42},
	Numpages = {10},
	Year = {2016},
	Peerreview = {yes},
	Medium = {2},
        Acmid = {2984385},
	Publisher = {ACM},
	Address = {New York, NY, USA},
	Language={English},
	Url = {http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2984380.2984385},
	Keywords = {scg-pub, snf-asa2, scg16, jb16, internationalworkshop, Andrei Chis, Domain-specific tools, User interfaces, Programming environments, Program comprehension, Tudor Girba, girba feenk-pub}
}

@incollection{Chis17a,
	Abstract = {Object-oriented programming aims to facilitate navigation between domain concepts and the code that addresses those domains by enabling developers to directly model those domain concepts in the code. To make informed decisions developers then  formulate detailed and domain-specific questions about their systems in terms of domain concepts, and use tools to explore available information and answer those questions. Development tools however focus mainly on object-oriented idioms and do not expose or exploit domain concepts constructed on top of object-oriented programming idioms. Analysis tools are typically not tightly integrated with development tools. This has a negative effect on program comprehension, increasing the effort and the time for obtaining answers. To improve program comprehension we propose to better integrate domain concepts and program comprehension tools into the development environment through moldable tools. Moldable tools are development tools that are aware of the current development context and support inexpensive creation of domain-specific extensions. We elaborate on the idea of moldable tools and show how to apply moldable tools to support object-oriented programming. Through practical examples we show how developers can embed domain concepts into their development tools.},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {PAUSE: Present And Ulterior Software Engineering},
	Editor = {Manuel Mazzara, Bertrand Meyer},
	Title = {Moldable Tools for Object-oriented Development},
	Pages= {77--101},
	Publisher = {Springer, Cham},
	Doi = {10.1007/978-3-319-67425-4_6},
	Peerreview = {yes},
	Medium = {2},
	Keywords = {scg-pub snf-asa2 scg17 jb18, Andrei Chis, Tudor Girba, girba feenk-pub},
	Url = {http://scg.unibe.ch/archive/papers/Chis17a-MoldableToolsPAUSE.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16c-MoldableToolsPAUSE.pdf},
	Bdsk-Url-2 = {https://link.springer.com/chapter/10.1007/978-3-319-67425-4_6},
	Year = {2017}}

@techreport{Girb17a,
    Author  = {Tudor G\^irba},
    Title   = {Humane assessment by example},
    Institution = {feenk.com},
    Url = {http://humane-assessment.com/res/humane-assessment-case-studies-a4.pdf},
    keywords = {girba Tudor Girba feenk-pub},
    Year    = {2017}
}

@misc{Girb19a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit examples girba feenk-pub},
	Title = {An example of example-driven development},
	Url = {https://medium.com/feenk/an-example-of-example-driven-development-4dea0d995920},
	Year = {2019}
}

@misc{Girb20a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit graphics brick bloc girba feenk-pub},
	Title = {One rendering tree},
	Url = {https://medium.com/feenk/one-rendering-tree-918eae49bcff},
	Year = {2020}
}

@misc{Girb21a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit lepiter girba feenk-pub},
	Title = {Introducing {Lepiter}: Knowledge Management + Multi-language Notebooks + Moldable Development},
	Url = {https://lepiter.io/feenk/introducing-lepiter--knowledge-management--e2p6apqsz5npq7m4xte0kkywn/},
	Year = {2021}
}

@inproceedings{Kube15a,
	 Abstract = {Analyzing how software engineers use the Integrated Development Environment (IDE) is essential to better understanding how engineers carry out their daily tasks. Spotter is a code search engine for the Pharo programming language. Since its inception, Spotter has been rapidly and broadly adopted within the Pharo community. However, little is known about how practitioners employ Spotter to search and navigate within the Pharo code base. This paper evaluates how software engineers use Spotter in practice. To achieve this, we remotely gather user actions called events. These events are then visually rendered using an adequate navigation tool chain. Sequences of events are represented using a visual alphabet. We found a number of usage patterns and identified underused Spotter features. Such findings are essential for improving Spotter.},
	 Author = {Kubelka, Juraj and Bergel, Alexandre and Chi\c{s}, Andrei and G\^irba, Tudor and Reichhart, Stefan and Robbes, Romain and Syrel, Aliaksei},
	 Booktitle = {Proceedings of 3rd IEEE Working Conference on Software Visualization - New Ideas and Emerging Results},
	 Pages = {145--149},
	 Publisher = {{IEEE}},
	 Series = {VISSOFT-NIER'15},
	 Doi={10.1109/VISSOFT.2015.7332426},
	 Title = {On Understanding How Developers Use the {Spotter} Search Tool},
	 Year = {2015},
	 month=sep,
 	 Peerreview = {yes},
	 Medium = {2},
	 Keywords = {scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub},
	 Url = {http://scg.unibe.ch/archive/papers/Kube15a-OnUnderstandingHowDevelopersUseTheSpotterSearchTool.pdf}}

@inproceedings{Nier22a,
    Author    = {Oscar Nierstrasz and Tudor G\^irba},
    Title     = {Making Systems Explainable},
    Booktitle = {{VISSOFT}'22: Proceedings of the 10th IEEE Working Conference on Software Visualization},
    Abstract  = {What makes software systems explainable? As we develop
      and maintain software, we have questions to ask about
      the code, but piecing together the answers remains hard.
      The main interface the classical IDE offers is a text
      editor for the source code. Code, documentation, and the
      running system are disconnected. In this keynote
      presentation, we will show how software systems can be
      made explainable with the help of three interacting
      technologies: (i) live notebooks that can be used to
      create narratives that link documentation, source code,
      and running applications, (ii) example methods that not
      only perform tests, but produce live examples that can
      be used within narratives, to explain use cases,
      scenarios and features, and (iii) a moldable inspector
      that can be easily extended with live custom views to
      answer domain-specific questions about software systems.
      With the help of running examples we will show in the
      keynotes presentation how these technologies work
      together to provide a radically different kind of
      development experience.},
    Annote    = {internationalconference},
    Keywords  = {feenk-pub girba},
    Url = {http://scg.unibe.ch/archive/papers/Nier22a-ExplainableSystems.pdf},
    DOI = {10.1109/VISSOFT55257.2022.00009},
    Publisher = {IEEE},
    PeerReview = {yes},
    Medium = {2},
    Year = {2022}
}

@misc{Nier23a,
	Author = {Oscar Nierstrasz},
	Title = {Mind the gap --- 50 years of shortening feedback loops},
	howpublished = {Blog post},
	month = jun,
	year = {2023},
	Keywords = {feenk-pub lowRoad},
	Url = {https://www.oscar.nierstrasz.org/posts/2023-06-12-MindTheGap}
}

@inproceedings{Syre15a,
	 abstract={Program comprehension requires developers to reason about many kinds of highly interconnected software entities. Dealing with this reality prompts developers to continuously intertwine searching and navigation. Nevertheless, most integrated development environments (IDEs) address searching by means of many disconnected search tools, making it difficult for developers to reuse search results produced by one search tool as input for another search tool. This forces developers to spend considerable time manually linking disconnected search results. To address this issue we propose Spotter, a model for expressing and combining search tools in a unified way. The current implementation shows that Spotter can unify a wide range of search tools. More information about Spotter can be found at scg.unibe.ch/research/moldablespotter},
	 author = {Aliaksei Syrel and Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart},
	 title = {Spotter: towards a unified search interface in {IDEs}},
 	 booktitle = {Proceedings of the Companion Publication of the 2015 ACM SIGPLAN Conference on Systems, Programming, and Applications: Software for Humanity},
	 series = {SPLASH Companion 2015},
	 year = {2015},
	 location = {Pittsburgh, PA, USA},
	 pages = {54--55},
	 numpages = {2},
	 url = {http://scg.unibe.ch/archive/papers/Syre15a-SpotterPosterAbstract.pdf},
	 doi = {10.1145/2814189.2817269},
	 isbn = {978-1-4503-3722-9},
	 acmid = {2817269},
	 publisher = {ACM},
	 address = {New York, NY, USA},
	 keywords = {snf-asa1, scg-pub scg15 jb16, Andrei Chis, Tudor Girba, girba feenk-pub},
	 peerreview = {yes},
	 medium = {2}
}

@inproceedings{Vale23a,
	Author = {Pablo Valenzuela-Toledo and Alexandre Bergel and Timo Kehrer and Oscar Nierstrasz},
	Title = {{EGAD}: A moldable tool for {GitHub} Action analysis},
	booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories},
	  Annote    = {internationalconference},
	series = {MSR '23},
	year = {2023},
	location = {Melbourne, Australia},
	Keywords = {seg-pub feenk-pub jb23},
	Url = {http://scg.unibe.ch/archive/papers/Vale23a.pdf},
	DOI = {10.1109/MSR59073.2023.00044},
	PeerReview = {yes},
	Medium = {2},
	abstract = {GitHub Actions (GA) enjoy increasing popularity in many software
		development projects as a means to automate repetitive software
		engineering tasks by enabling programmable event-driven workflows.
		Researchers typically analyze GA at the raw data level using batch
		tools to mine and analyze actions, jobs, and steps within GA
		workflows. Although this approach is widely applicable, it ignores
		the specific context of the GA workflow domain. Consequently,
		researchers do not reason directly about the domain abstractions. We
		present our preliminary steps in building EGAD (Explorable GitHub
		Action Domain Model), a moldable domain-specific tool to depict and
		analyze detailed GA workflow data. EGAD consists of an explorable
		domain model of GA workflows augmented with custom, domain-specific
		views, and live narratives. We illustrate EGAD in action using it
		to explore "sticky commits" in GitHub repositories.}
}

@inproceedings{Vale23b,
	Title = {Exploring {GitHub} Actions through {EGAD}: An Experience Report},
	Author = {Pablo Valenzuela-Toledo and Alexandre Bergel and Timo Kehrer and Oscar Nierstrasz},
	Booktitle = {IWST'23: Proceedings of International Workshop on Smalltalk Technologies},
	Note = {To appear},
	Keywords = {seg-pub feenk-pub jb23 MISSING-DOI},
	Url = {http://scg.unibe.ch/archive/papers/Vale23b.pdf},
	Abstract = {GitHub Actions (GA) is an automation and workflow orchestration
		platform that facilitates the execution of software engineering
		tasks. GA supports automation through YAML workflow files, the main
		component for action integration. The workflow files are a valuable
		source of information, for example, to understand how automation
		actions have been orchestrated. To conduct GA studies, researchers
		use batch (non-interactive) tools for analysis. However, this
		approach ignores the context of the GA domain and hinders
		understanding of the intricate pieces that revolve around workflow
		files. We present our experience developing and using EGAD
		(Explorable GitHub Action Domain Model) and share valuable insights
		we gained. Our focus is on three key areas: (i) onboarding of
		Glamorous Toolkit (GT), (ii) creating a comprehensive and explorable
		domain model of GA, and (iii) highlighting the potential of EGAD as a
		research workbench. To facilitate takeaways from these lessons, we
		provide details that showcase our learnings, which researchers can
		apply in their future endeavors. We aim to make this a valuable
		resource for researchers investigating GitHub Actions.},
	Annote = {internationalworkshop},
	Peerreview = {yes},
	location = {Lyon, France},
	Year = {2023},
	Medium = {4}
}

@misc{feenk23a,
	author = {{feenk.com}},
	title = {{Glamorous Toolkit} (version 1.0)},
	url = {https://github.com/feenkcom/gtoolkit},
	keywords = {feenk-pub},
	version = {1.0},
	year = {2023}
}

@inproceedings{Bell18a,
  title={On the dichotomy of debugging behavior among programmers},
  author={Beller, Moritz and Spruit, Niels and Spinellis, Diomidis and Zaidman, Andy},
  booktitle={Proceedings of the 40th International Conference on Software Engineering},
  pages={572--583},
  year={2018},
  DOI ={10.1145/3180155.3180175},
  URL = {https://azaidman.github.io/publications/bellerICSE2018.pdf}
}

@inproceedings{Hans97a,
	Author = {David R. Hanson and Jeffrey L. Korn},
	Booktitle = {IN WINTER 1997 USENIX CONFERENCE},
	Pages = {173--184},
	Title = {A Simple and Extensible Graphical Debugger},
	Year = {1997},
	URL = {https://www.usenix.org/legacy/publications/library/proceedings/ana97/full_papers/hanson/hanson.html}}

@article{HuiW08a,
 author = {Wu, Hui and Gray, Jeff and Mernik, Marjan},
 title = {Grammar-driven Generation of Domain-specific Language Debuggers},
 journal = {Softw. Pract. Exper.},
 issue_date = {August 2008},
 volume = {38},
 number = {10},
 month = aug,
 year = {2008},
 issn = {0038-0644},
 pages = {1073--1103},
 numpages = {31},
 url = {http://dx.doi.org/10.1002/spe.v38:10},
 doi = {10.1002/spe.v38:10},
 acmid = {1394970},
 publisher = {John Wiley \& Sons, Inc.},
 address = {New York, NY, USA},
 keywords = {DSL, GPL, debugging, grammars, program environments-integrated environments}
}

@article{Lind11a,
	 author = {Lindeman, Ricky T. and Kats, Lennart C.L. and Visser, Eelco},
	 title = {Declaratively Defining Domain-specific Language Debuggers},
	 journal = {SIGPLAN Not.},
	 issue_date = {March 2012},
	 volume = {47},
	 number = {3},
	 month = oct,
	 year = {2011},
	 issn = {0362-1340},
	 pages = {127--136},
	 numpages = {10},
	 url = {http://doi.acm.org/10.1145/2189751.2047885},
	 doi = {10.1145/2189751.2047885},
	 acmid = {2047885},
	 publisher = {ACM},
	 address = {New York, NY, USA},
	 keywords = {debugging, domain-specific language, language workbench, spoofax}
}

@techreport{Meye88a,
	Address = {Goleta, CA},
	Author = {Bertrand Meyer},
	Institution = {Interactive Software Engineering},
	Keywords = {olit eiffel exceptions binder},
	Title = {Disciplined Exceptions},
	Type = {TR-EI-22/EX},
	Year = {1988},
	URL = {https://se.inf.ethz.ch/old/people/meyer/publications/methodology/exceptions.pdf}
}

@article{Meye92b,
	Author = {Bertrand Meyer},
	Doi = {10.1109/2.161279},
	Journal = {IEEE Computer (Special Issue on Inheritance \& Classification)},
	Keywords = {olit-oopl ieee},
	Month = oct,
	Number = {10},
	Pages = {40--52},
	Title = {Applying Design by Contract},
	Url = {http://se.ethz.ch/~meyer/publications/computer/contract.pdf},
	Volume = {25},
	Year = {1992}
}

@incollection{Pena13b,
	Author = {Vanessa Pe{\~n}a Araya and Alexandre Bergel and Damien Cassou and St\'ephane Ducasse and Jannik Laval},
	Booktitle = {Deep Into Pharo},
	Isbn = {978-3-9523341-6-4},
	Keywords = {Smalltalk, Pharo, Object-Oriented Programming, Live Programming},
	Month = sep,
	Pages = 20,
	Publisher = {Square Bracket Associates},
	Title = {Scripting Visualizations with Mondrian},
	URL = {https://inria.hal.science/hal-00858725/document},
	Year = {2013}}

@inproceedings{Meye06a,
	Abstract = {Data visualization is the process of representing
				  data as pictures to support reasoning about the
				  underlying data. For the interpretation to be as
				  easy as possible, we need to be as close as possible
				  to the original data. As most visualization tools
				  have an internal meta-model, which is different from
				  the one for the presented data, they usually need to
				  duplicate the original data to conform to their
				  meta-model. This leads to an increase in the
				  resources needed, increase which is not always
				  justified. In this work we argue for the need of
				  having an engine that is as close as possible to the
				  data and we present our solution of moving the
				  visualization tool to the data, instead of moving
				  the data to the visualization tool. Our solution
				  also emphasizes the necessity of reusing basic
				  blocks to express complex visualizations and
				  allowing the programmer to script the visualization
				  using his preferred tools, rather than a third party
				  format. As a validation of the expressiveness of our
				  framework, we show how we express several already
				  published visualizations and describe the pros and
				  cons of the approach.},
	Address = {New York, NY, USA},
	Annote = {internationalconference},
	Author = {Michael Meyer and Tudor G\^irba and Mircea Lungu},
	Booktitle = {ACM Symposium on Software Visualization (SoftVis'06)},
	Doi = {10.1145/1148493.1148513},
	Keywords = {hasler07 scg-pub girba visualization scg-none jb07 fb06 mooseCincom norex06 moose-pub sde-visualization},
	Medium = {2},
	Pages = {135--144},
	Peerreview = {yes},
	Publisher = {ACM Press},
	Title = {Mondrian: An Agile Visualization Framework},
	Url = {http://scg.unibe.ch/archive/papers/Meye06aMondrian.pdf},
	Year = {2006},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Meye06aMondrian.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1148493.1148513}}

@misc{Brant17a,
  title={Smacc: a compiler-compiler},
  author={Brant, John and Lecerf, Jason and Goubier, Thierry and Ducasse, St{\'e}phane and Black, Andrew},
  year={2017},
  Url = {http://books.pharo.org/booklet-Smacc/pdf/2018-10-21-Smacc-Compiler.pdf},
  publisher={Pharo}
}

@article{McCa08a,
  title={Debugging: a review of the literature from an educational perspective},
  author={McCauley, Renee and Fitzgerald, Sue and Lewandowski, Gary and Murphy, Laurie and Simon, Beth and Thomas, Lynda and Zander, Carol},
  journal={Computer Science Education},
  volume={18},
  number={2},
  pages={67--92},
  year={2008},
  publisher={Taylor \& Francis},
  DOI = {10.1080/08993400802114581},
  URL = {https://www.researchgate.net/profile/Lynda-Thomas-2/publication/37146936_Debugging_A_review_of_the_literature_from_an_educational_perspective/links/02bfe5137acd1199f8000000/Debugging-A-review-of-the-literature-from-an-educational-perspective.pdf}
}

@incollection{Pavl15a,
	year={2015},
	isbn={978-3-319-19583-4},
	booktitle={Reliable Software Technologies -- Ada--Europe 2015},
	volume={9111},
	series={Lecture Notes in Computer Science},
	editor={de la Puente, Juan Antonio and Vardanega, Tullio},
	doi={10.1007/978-3-319-19584-1_3},
	title={Extensible Debugger Framework for Extensible Languages},
	url={https://mbeddr.com/files/ada2015_debuggers.pdf},
	publisher={Springer International Publishing},
	keywords={Debugging; Domain-specific languages; Frameworks},
	author={Pavletic, Domenik and Voelter, Markus and Raza, SyedAoun and Kolb, Bernd and Kehrer, Timo},
	pages={33-49},
	language={English}
}

@inproceedings{Brah23a,
  title={{D2X}: An {eXtensible} {conteXtual} Debugger for Modern {DSLs}},
  author={Brahmakshatriya, Ajay and Amarasinghe, Saman},
  booktitle={Proceedings of the 21st ACM/IEEE International Symposium on Code Generation and Optimization},
  pages={162--172},
  url = {http://groups.csail.mit.edu/commit/papers/2023/ajay-cgo23-d2x.pdf},
  year={2023}
}

@book{Rose96a,
  title={How debuggers work: algorithms, data structures, and architecture},
  author={Rosenberg, Jonathan B},
  year={1996},
  publisher={John Wiley \& Sons, Inc.}
}

@article{Voel17a,
author={Voelter, Markus
and Kolb, Bernd
and Szab{\'o}, Tam{\'a}s
and Ratiu, Daniel
and van Deursen, Arie},
title={Lessons learned from developing mbeddr: a case study in language engineering with {MPS}},
journal={Software {\&} Systems Modeling},
year={2017},
month=jan,
day={09},
abstract={Language workbenches are touted as a promising technology to engineer languages for use in a wide range of domains, from programming to science to business. However, not many real-world case studies exist that evaluate the suitability of language workbench technology for this task. This paper contains such a case study. In particular, we evaluate the development of mbeddr, a collection of integrated languages and language extensions built with the Jetbrains MPS language workbench. mbeddr consists of 81 languages, with their IDE support, 34 of them C extensions. The mbeddr languages use a wide variety of notations---textual, tabular, symbolic and graphical---and the C extensions are modular; new extensions can be added without changing the existing implementation of C. mbeddr's development has spanned 10 person-years so far, and the tool is used in practice and continues to be developed. This makes mbeddr a meaningful case study of non-trivial size and complexity. The evaluation is centered around five research questions: language modularity, notational freedom and projectional editing, mechanisms for managing complexity, performance and scalability issues and the consequences for the development process. We draw generally positive conclusions; language engineering with MPS is ready for real-world use. However, we also identify a number of areas for improvement in the state of the art in language engineering in general, and in MPS in particular.},
issn={1619-1374},
doi={10.1007/s10270-016-0575-4},
url={http://voelter.de/data/pub/voelterEtAl2017-buildingMbeddr.pdf}
}

@inproceedings{Tuba01a,
  title={A Knowledge Base for Program Debugging},
  author={Tubaishat, Abdallah},
  booktitle={Proceedings of the ACS/IEEE International Conference on Computer Systems and Applications},
  pages={321},
  year={2001},
  DOI = {10.1109/AICCSA.2001.934005}
 }

@inproceedings{Kats10a,
	Address = {Reno/Tahoe, NV, USA},
	Author = {Kats, Lennart C. L. and Visser, Eelco},
	Booktitle = {OOPSLA'10: Proceedings of the 25th International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
	Doi = {10.1145/1869459.1869497},
	Editor = {Martin Rinard},
	Month = oct,
	Pages = {444--463},
	Title = {The {Spoofax} Language Workbench. {Rules} for Declarative Specification of Languages and {IDEs}},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1869459.1869497}}

@inproceedings{Dupr19a,
  title={Sindarin: A versatile scripting {API} for the {Pharo} debugger},
  author={Dupriez, Thomas and Polito, Guillermo and Costiou, Steven and Aranega, Vincent and Ducasse, St{\'e}phane},
  booktitle={Proceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages},
  pages={67--79},
  doi={10.1145/3359619.3359745},
  url={https://rmod-files.lille.inria.fr/Team/Texts/Papers/Dupr19a-DLS2019-Official.pdf},
  year={2019}
}

@article{Duca22a,
  author = {St{\'{e}}phane Ducasse and Guillermo  Polito and Oleksandr Zaitsev and Marcus Denker and Pablo Tesone},
  title = {Deprewriter: On the fly rewriting method deprecations},
  journal = {Journal of Object Technology},
  volume = {21},
  number = {1},
  issn = {1660-1769},
  year = {2022},
  pages = {1:1-23},
  doi = {10.5381/jot.2022.21.1.a1},
  url = {http://www.jot.fm/contents/issue_2022_01/article1.html}
}

@misc{JVMTI24,
  title={{JVM} {Tool} {Interface} version 22.0},
  URL = {https://docs.oracle.com/en/java/javase/22/docs/specs/jvmti.html},
  Author = {Oracle},
  year={2024}
}

@misc{DAP21,
	title = {Debug Adapter Protocol},
	Author = {Microsoft},
	URL = {https://microsoft.github.io/debug-adapter-protocol},
	year = {2021}
}

@article{Bous18a,
  title={Omniscient debugging for executable {DSLs}},
  author={Bousse, Erwan and Leroy, Dorian and Combemale, Benoit and Wimmer, Manuel and Baudry, Benoit},
  journal={Journal of Systems and Software},
  volume={137},
  pages={261--288},
  year={2018},
  publisher={Elsevier},
  DOI = {10.1016/j.jss.2017.11.025},
  URL= {https://inria.hal.science/hal-01662336/file/jss17-debugging.pdf}
}

@article{Enet23a,
  title={Protocol-Based Interactive Debugging for Domain-Specific Languages},
  author={Enet, Josselin and Bousse, Erwan and Tisi, Massimo and Suny{\'e}, Gerson},
  journal={The Journal of Object Technology},
  volume={22},
  number={2},
  year={2023},
  DOI = {10.5381/jot.2023.22.2.a6},
  URL = {https://www.jot.fm/issues/issue_2023_02/article6.pdf}
}

@inproceedings{Cost20a,
  title={Handling Error-Handling Errors: dealing with debugger bugs in Pharo},
  author={Costiou, Steven and Dupriez, Thomas and Pollet, Damien},
  booktitle={Preprint from IWST20: International Workshop on Smalltalk Technologies},
  year={2020},
  URL = {https://inria.hal.science/hal-02992644/document}
}

@article{Vant18a,
  title={Fast, flexible, polyglot instrumentation support for debuggers and other tools},
  author={Van De Vanter, Michael and Seaton, Chris and Haupt, Michael and Humer, Christian and W{\"u}rthinger, Thomas},
  journal={The Art, Science, and Engineering of Programming},
  year={2018},
  DOI = {10.22152/programming-journal.org/2018/2/14},
  URL ={https://arxiv.org/pdf/1803.10201v1.pdf}
}

@inproceedings{Vant15a,
  title={Building debuggers and other tools: we can ``have it all''},
  author={Van De Vanter, Michael L},
  booktitle={Proceedings of the 10th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems},
  pages={1--3},
  articleno = {2},
  numpages = {3},
  year={2015},
  DOI = {10.1145/2843915.2843917},
  URL = {https://vandevanter.net/mlvdv/publications/2015-icooolps.pdf}
}

@inproceedings{Ress12a,
	Abstract = {During the process of developing and maintaining a complex
				  software system, developers pose detailed questions about the
				  runtime behavior of the system. Source code views offer strictly
				  limited insights, so developers often turn to tools like debuggers
				  to inspect and interact with the running system. Unfortunately,
				  traditional debuggers focus on the runtime stack as the key
				  abstraction to support debugging operations, though the questions
				  developers pose often have more to do with objects and their
				  interactions.
				  We propose object-centric debugging as an alternative approach
				  to interacting with a running software system. We show how, by
				  focusing on objects as the key abstraction, natural debugging
				  operations can be defined to answer developer questions related
				  to runtime behavior. We present a running prototype of an
				  object-centric debugger, and demonstrate, with the help of a series
				  of examples, how object-centric debugging offers more effective
				  support for many typical developer tasks than a traditional
				  stack-oriented debugger.},
	Annote = {internationalconference},
	Author = {Ressia, Jorge and Bergel, Alexandre and Nierstrasz, Oscar},
	Booktitle = {Proceedings of the 34rd international conference on Software engineering},
	Doi = {10.1109/ICSE.2012.6227167},
	Keywords = {scg12 scg-pub jb12 snf12 reflection bifrost ocdebugging},
	Location = {Zurich, Switzerland},
	Medium = {2},
	Peerreview = {yes},
	Series = {ICSE '12},
	Title = {Object-Centric Debugging},
	Url = {http://scg.unibe.ch/archive/papers/Ress12a-ObjectCentricDebugging.pdf},
	Year = {2012},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Ress12a-ObjectCentricDebugging.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ICSE.2012.6227167}}

